
@model IEnumerable<frontend.Models.Category>

@{
    ViewData["Title"] = "Categories Management | E-Greeting Card Platform";
    Layout = "_AdminLayout";
}

<!-- Breadcrumbs & Page Title -->
<div class="flex flex-col sm:flex-row sm:items-center sm:justify-between mb-6">
    <div>
        <div class="flex items-center text-sm text-gray-500 mb-2">
            <a asp-controller="Admin" asp-action="Dashboard" class="hover:text-primary">Dashboard</a>
            <div class="w-4 h-4 flex items-center justify-center mx-1">
                <i class="ri-arrow-right-s-line"></i>
            </div>
            <span class="text-gray-700">Categories</span>
        </div>
        <h1 class="text-2xl font-bold text-gray-900">Categories</h1>
    </div>
    <a asp-action="Create" class="mt-3 sm:mt-0 px-4 py-2 bg-primary text-white rounded-button text-sm font-medium hover:bg-primary/90 whitespace-nowrap flex items-center">
        <div class="w-4 h-4 flex items-center justify-center mr-2">
            <i class="ri-add-line"></i>
        </div>
        Add New Category
    </a>
</div>

@if (TempData["SuccessMessage"] != null)
{
    <div class="bg-green-100 border border-green-400 text-green-700 px-4 py-3 rounded mb-6 flex items-center justify-between" role="alert">
        <div class="flex items-center">
            <div class="w-5 h-5 mr-2 flex items-center justify-center">
                <i class="ri-check-line"></i>
            </div>
            <span>@TempData["SuccessMessage"]</span>
        </div>
        <button type="button" class="text-green-700" onclick="this.parentElement.style.display='none'">
            <div class="w-5 h-5 flex items-center justify-center">
                <i class="ri-close-line"></i>
            </div>
        </button>
    </div>
}

<!-- Categories Table -->
<div class="bg-white rounded shadow overflow-hidden mb-6">
    <div class="overflow-x-auto">
        <table class="min-w-full divide-y divide-gray-200">
            <thead class="bg-gray-50">
                <tr>
                    <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                        @Html.DisplayNameFor(model => model.Name)
                    </th>
                    <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                        Template Count
                    </th>
                    <th scope="col" class="px-6 py-3 text-right text-xs font-medium text-gray-500 uppercase tracking-wider">
                        Actions
                    </th>
                </tr>
            </thead>
            <tbody class="bg-white divide-y divide-gray-200">
                @foreach (var item in Model)
                {
                    <tr class="hover:bg-gray-50">
                        <td class="px-6 py-4 whitespace-nowrap">
                            <div class="text-sm font-medium text-gray-900">@Html.DisplayFor(modelItem => item.Name)</div>
                        </td>
                        <td class="px-6 py-4 whitespace-nowrap">
                            <div class="text-sm text-gray-500">
                                @(item.Templates?.Count ?? 0) templates
                            </div>
                        </td>
                        <td class="px-6 py-4 whitespace-nowrap text-right text-sm font-medium">
                            <div class="flex justify-end space-x-2">
                                <a asp-action="Edit" asp-route-id="@item.CategoryId" class="text-primary hover:text-primary/80" title="Edit">
                                    <div class="w-5 h-5 flex items-center justify-center">
                                        <i class="ri-edit-line"></i>
                                    </div>
                                </a>
                                <a asp-action="Delete" asp-route-id="@item.CategoryId" class="text-red-600 hover:text-red-800" title="Delete" onclick="return confirm('Are you sure to delete')">
                                    <div class="w-5 h-5 flex items-center justify-center">
                                        <i class="ri-delete-bin-line"></i>
                                    </div>
                                </a>
                            </div>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
</div>
@section Scripts {
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            // Modal functionality
            const categoryModal = document.getElementById('category-modal');
            const deleteModal = document.getElementById('delete-modal');
            const addCategoryBtn = document.querySelector('a[asp-action="Create"]');
            const closeModalBtn = document.getElementById('close-modal');
            const cancelBtn = document.getElementById('cancel-button');
            const closeDeleteModalBtn = document.getElementById('close-delete-modal');
            const cancelDeleteBtn = document.getElementById('cancel-delete');
            const editCategoryBtns = document.querySelectorAll('a[asp-action="Edit"]');
            const deleteCategoryBtns = document.querySelectorAll('a[asp-action="Delete"]');
            const modalTitle = document.getElementById('modal-title');

            // Open add category modal (modified to handle both link and button clicks)
            if (addCategoryBtn) {
                addCategoryBtn.addEventListener('click', function(e) {
                    // If it's a regular link, let it proceed normally
                    if (!e.target.closest('button')) {
                        return;
                    }
                    e.preventDefault();
                    modalTitle.textContent = 'Add New Category';
                    document.getElementById('category-form').reset();
                    categoryModal.classList.remove('hidden');
                });
            }

            // Close category modal
            function closeCategoryModal() {
                categoryModal.classList.add('hidden');
            }

            if (closeModalBtn) closeModalBtn.addEventListener('click', closeCategoryModal);
            if (cancelBtn) cancelBtn.addEventListener('click', closeCategoryModal);

            // Close delete modal
            function closeDeleteModal() {
                deleteModal.classList.add('hidden');
            }

            if (closeDeleteModalBtn) closeDeleteModalBtn.addEventListener('click', closeDeleteModal);
            if (cancelDeleteBtn) cancelDeleteBtn.addEventListener('click', closeDeleteModal);

            // Open edit category modal
            editCategoryBtns.forEach(btn => {
                btn.addEventListener('click', function(e) {
                    e.preventDefault();
                    modalTitle.textContent = 'Edit Category';
                    categoryModal.classList.remove('hidden');
                    // Here you would typically populate the form with the category's data
                });
            });

            // Open delete confirmation modal
            deleteCategoryBtns.forEach(btn => {
                btn.addEventListener('click', function(e) {
                    e.preventDefault();
                    deleteModal.classList.remove('hidden');
                });
            });

            // Close modals when clicking outside
            window.addEventListener('click', function(event) {
                if (event.target === categoryModal) {
                    closeCategoryModal();
                }
                if (event.target === deleteModal) {
                    closeDeleteModal();
                }
            });

            // Form submission (prevent default for demo)
            const categoryForm = document.getElementById('category-form');
            if (categoryForm) {
                categoryForm.addEventListener('submit', function(e) {
                    e.preventDefault();
                    // Here you would typically handle the form submission
                    closeCategoryModal();
                });
            }

            // Delete confirmation
            const confirmDeleteBtn = document.getElementById('confirm-delete');
            if (confirmDeleteBtn) {
                confirmDeleteBtn.addEventListener('click', function() {
                    // Here you would typically handle the delete action
                    closeDeleteModal();
                });
            }

            // Icon selection
            const iconButtons = document.querySelectorAll('#category-form button[type="button"]');
            iconButtons.forEach(button => {
                button.addEventListener('click', function() {
                    // Remove selected class from all buttons
                    iconButtons.forEach(btn => {
                        btn.classList.remove('ring-2');
                    });
                    // Add selected class to clicked button
                    this.classList.add('ring-2');
                });
            });
        });
    </script>
}