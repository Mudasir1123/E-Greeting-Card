@{
    ViewData["Title"] = "Subscribe - E-Greeting";
    // Safely handle null ViewBag.SelectedPlan
    var plan = ViewBag.SelectedPlan as string ?? "free";

    // Plan details dictionary for cleaner code
    var planDetails = new Dictionary<string, (string Name, string Price, string Billing)>
            {
                ["free"] = ("Free", "$0", "forever"),
                ["daily"] = ("Daily Sender", "$12.99", "per month"),
                ["business"] = ("Business", "$29.99", "per month")
            };

    // Get current plan details or default to free
    var currentPlan = planDetails.ContainsKey(plan.ToLower())
        ? planDetails[plan.ToLower()]
        : planDetails["free"];
}

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>@ViewData["Title"]</title>
    <script src="https://cdn.tailwindcss.com/3.4.16"></script>
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap" rel="stylesheet">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/remixicon/4.6.0/remixicon.min.css">
    <style>
        .custom-checkbox {
            appearance: none;
            width: 1.25rem;
            height: 1.25rem;
            border: 2px solid #d1d5db;
            border-radius: 4px;
            position: relative;
            cursor: pointer;
            transition: all 0.2s ease;
        }

            .custom-checkbox:checked {
                background-color: #4f46e5;
                border-color: #4f46e5;
            }

                .custom-checkbox:checked::after {
                    content: '';
                    position: absolute;
                    left: 6px;
                    top: 2px;
                    width: 5px;
                    height: 10px;
                    border: solid white;
                    border-width: 0 2px 2px 0;
                    transform: rotate(45deg);
                }

        .error-message {
            color: #ef4444;
            font-size: 0.875rem;
            margin-top: 0.25rem;
            display: none;
        }

        .input-error {
            border-color: #ef4444 !important;
        }
    </style>
</head>
<body class="bg-gray-50">
    <div class="container mx-auto px-4 py-12">
        <div class="max-w-md mx-auto bg-white rounded-lg shadow-sm p-8">
            <div class="text-center mb-8">
                <h1 class="text-2xl font-bold text-gray-900 mb-2">Subscribe to @currentPlan.Name</h1>
                <p class="text-gray-600">You've selected the @currentPlan.Name plan at @currentPlan.Price @currentPlan.Billing</p>
            </div>

            @if (plan.ToLower() == "free")
            {
                <div class="text-center mb-8">
                    <div class="w-16 h-16 bg-primary/10 rounded-full flex items-center justify-center mx-auto mb-4">
                        <i class="ri-check-line text-primary text-2xl"></i>
                    </div>
                    <p class="text-gray-600">Your free plan is now active! Start creating your e-greeting cards today.</p>
                </div>

                <div class="flex justify-center">
                    <a asp-controller="Card" asp-action="Index" class="rounded-md bg-primary text-white px-6 py-3 text-center font-medium hover:bg-primary/90 transition-colors whitespace-nowrap">
                        Go to My Cards
                    </a>
                </div>
            }
            else
            {
                <form id="subscriptionForm" class="space-y-6" method="post" asp-action="Subscribe" asp-controller="Subscription">
                    <!-- Payment details -->
                    <div>
                        <label for="cardNumber" class="block text-sm font-medium text-gray-700 mb-1">Card Number</label>
                        <input type="text" id="cardNumber" name="cardNumber" placeholder="1234 5678 9012 3456"
                               class="block w-full px-4 py-2.5 border border-gray-300 rounded-md text-gray-900 focus:outline-none focus:ring-2 focus:ring-primary/20 focus:border-primary text-sm"
                               required pattern="\d{4}\s?\d{4}\s?\d{4}\s?\d{4}">
                        <div id="cardNumberError" class="error-message">Please enter a valid card number</div>
                    </div>

                    <div class="grid grid-cols-2 gap-4">
                        <div>
                            <label for="expiry" class="block text-sm font-medium text-gray-700 mb-1">Expiry Date</label>
                            <input type="text" id="expiry" name="expiry" placeholder="MM/YY"
                                   class="block w-full px-4 py-2.5 border border-gray-300 rounded-md text-gray-900 focus:outline-none focus:ring-2 focus:ring-primary/20 focus:border-primary text-sm"
                                   required pattern="(0[1-9]|1[0-2])\/?([0-9]{2})">
                            <div id="expiryError" class="error-message">Please enter a valid expiry date</div>
                        </div>
                        <div>
                            <label for="cvc" class="block text-sm font-medium text-gray-700 mb-1">CVC</label>
                            <input type="text" id="cvc" name="cvc" placeholder="123"
                                   class="block w-full px-4 py-2.5 border border-gray-300 rounded-md text-gray-900 focus:outline-none focus:ring-2 focus:ring-primary/20 focus:border-primary text-sm"
                                   required pattern="\d{3,4}">
                            <div id="cvcError" class="error-message">Please enter a valid CVC</div>
                        </div>
                    </div>

                    <div>
                        <label for="name" class="block text-sm font-medium text-gray-700 mb-1">Name on Card</label>
                        <input type="text" id="name" name="name" placeholder="John Doe"
                               class="block w-full px-4 py-2.5 border border-gray-300 rounded-md text-gray-900 focus:outline-none focus:ring-2 focus:ring-primary/20 focus:border-primary text-sm"
                               required>
                        <div id="nameError" class="error-message">Please enter your name</div>
                    </div>

                    <div class="flex items-start">
                        <input type="checkbox" id="terms" name="terms" class="custom-checkbox mt-1" required>
                        <label for="terms" class="ml-2 block text-sm text-gray-700">
                            I agree to the <a href="#" class="text-primary hover:text-primary/80">Terms of Service</a> and <a href="#" class="text-primary hover:text-primary/80">Privacy Policy</a>
                        </label>
                        <div id="termsError" class="error-message ml-2">You must accept the terms</div>
                    </div>

                    <button type="submit" class="w-full rounded-md bg-primary text-white py-3 font-medium hover:bg-primary/90 transition-colors whitespace-nowrap">
                        Subscribe Now
                    </button>
                </form>

                <p class="text-xs text-gray-500 mt-6 text-center">Your subscription will begin immediately. You can cancel at any time.</p>
            }
        </div>
    </div>

    <script>
        document.addEventListener('DOMContentLoaded', function() {
            const form = document.getElementById('subscriptionForm');
            if (!form) return;

            const inputs = form.querySelectorAll('input[required]');

            // Real-time validation
            inputs.forEach(input => {
                input.addEventListener('input', () => validateField(input));
                input.addEventListener('blur', () => validateField(input));
            });

            // Form submission validation
            form.addEventListener('submit', function(e) {
                let isValid = true;

                inputs.forEach(input => {
                    if (!validateField(input)) {
                        isValid = false;
                    }
                });

                // Special validation for terms checkbox
                const terms = document.getElementById('terms');
                if (!terms.checked) {
                    terms.parentElement.classList.add('text-red-500');
                    document.getElementById('termsError').style.display = 'block';
                    isValid = false;
                }

                if (!isValid) {
                    e.preventDefault();
                }
            });

            function validateField(field) {
                const errorElement = document.getElementById(`${field.id}Error`);

                if (!field.checkValidity()) {
                    field.classList.add('input-error');
                    errorElement.style.display = 'block';

                    if (field.validity.valueMissing) {
                        errorElement.textContent = `${field.labels[0].textContent} is required`;
                    } else if (field.validity.patternMismatch) {
                        if (field.id === 'cardNumber') {
                            errorElement.textContent = 'Please enter a valid 16-digit card number';
                        } else if (field.id === 'expiry') {
                            errorElement.textContent = 'Please use MM/YY format';
                        } else if (field.id === 'cvc') {
                            errorElement.textContent = 'Please enter a 3 or 4 digit CVC';
                        }
                    }

                    return false;
                } else {
                    field.classList.remove('input-error');
                    errorElement.style.display = 'none';
                    return true;
                }
            }
        });
    </script>
</body>
</html>